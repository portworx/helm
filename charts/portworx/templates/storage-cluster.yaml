{{- if and (.Values.deployCluster) (or (not (lookup "apps/v1" "DaemonSet" "kube-system" "portworx")) (default true .Values.generateStorageClusterForMigration)) }}
---
kind: StorageCluster
apiVersion: core.libopenstorage.org/v1
metadata:
  name: "{{ required "Clustername cannot be empty" .Values.clusterName }}"
  annotations:
    {{- if .Values.openshiftInstall }}
    portworx.io/is-openshift: "true"
    {{- end }}
    {{- if .Values.pksInstall }}
    portworx.io/is-pks: "true"
    {{- end }}
    {{- if .Values.EKSInstall }}
    portworx.io/is-eks: "true"
    {{- end }}
    {{- if .Values.AKSInstall }}
    portworx.io/is-aks: "true"
    {{- end }}
    {{- if .Values.OKEInstall }}
    portworx.io/is-oke: "true"
    {{- end }}
    {{- if .Values.miscArgs }}
    portworx.io/misc-args: {{ .Values.miscArgs | quote }}
    {{- end }}
    portworx.io/disable-storage-class: {{ .Values.disableStorageClass | quote }}
    {{- if .Values.serviceType }}
    portworx.io/service-type: {{ .Values.serviceType | quote }}
    {{- end }}
    {{- if (lookup "apps/v1" "DaemonSet" "kube-system" "portworx") }}
    portworx.io/migration-approved: "false"
    {{- end }}
  labels:
    heritage: {{ .Release.Service | quote }}
    release: {{ .Release.Name | quote }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
    app.kubernetes.io/instance: {{ .Release.Name | quote }}
spec:
  image: "{{ .Values.ociMonitor.image.repository }}:{{ default .Chart.AppVersion .Values.ociMonitor.image.tag }}"
  imagePullPolicy: {{ .Values.ociMonitor.image.pullPolicy }}
  customImageRegistry: {{ .Values.customRegistryURL }}
  imagePullSecret: {{ .Values.global.image.pullSecret }}
  kvdb:
    internal: {{ .Values.kvdb.internal }}
    {{- with .Values.etcd.endpoints }}
    endpoints:
      {{- toYaml . | nindent 6 }}
    {{- end }}
    authSecret: {{ .Values.kvdb.authSecretName }}
  {{- with .Values.cloudStorage }}
  cloudStorage:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  {{- with .Values.storage }}
  storage:
    {{- toYaml . | nindent 4 }}
  {{- end }}
    kvdbDeviceSpec: {{ .Values.kvdb.device }}
    journalDeviceSpec: {{ .Values.journalDevice }}
    maxStorageNodesPerZone: {{ .Values.maxStorageNodesPerZone }}
    forceUseDisks: {{ .Values.forceUseDisks }}
    useAllWithPartitions: {{ .Values.useAllWithPartitions }}
    useAll: {{ .Values.useAll }}
    kvdbDevice: {{ .Values.kvdb.device }}
    journalDevice: {{ .Values.journalDevice }}
  network:
    dataInterface: {{ .Values.network.dataInterface }}
    mgmtInterface: {{ .Values.network.mgmtInterface }}
  secretsProvider: {{ .Values.secretsProvider }}
  env:
  {{- with .Values.extraEnv }}
    {{- toYaml . | nindent 2 }}
  {{- end }}
  {{- end }}
  {{- if and .Values.licenseSecret.name .Values.licenseSecret.key }}
  - name: SAAS_ACCOUNT_KEY_STRING
    valueFrom:
      secretKeyRef:
        name: {{ .Values.licenseSecret.name }}
        key: {{ .Values.licenseSecret.key }}
  {{- end }}
  {{- if .Values.AKSInstall }}
  - name: AZURE_CLIENT_SECRET
    valueFrom:
      secretKeyRef:
        name: px-azure
        key: AZURE_CLIENT_SECRET
  - name: AZURE_CLIENT_ID
    valueFrom:
      secretKeyRef:
        name: px-azure
        key: AZURE_CLIENT_ID
  - name: AZURE_TENANT_ID
    valueFrom:
      secretKeyRef:
        name: px-azure
        key: AZURE_TENANT_ID
  {{- end }}
  {{- if .Values.OKEInstall }}
  - name: PX_ORACLE_user_ocid
    valueFrom:
      secretKeyRef:
        name: ociapikey
        key: PX_ORACLE_user_ocid
  - name: PX_ORACLE_fingerprint
    valueFrom:
      secretKeyRef:
        name: ociapikey
        key: PX_ORACLE_fingerprint
  - name: "PX_ORACLE_private_key_path"
    value: "/etc/pwx/oci_key/oci_api_key.pem"
  {{- end }}
  - name: PX_SECRETS_NAMESPACE
    value: {{ .Release.Namespace }}
  stork:
    enabled: {{ .Values.stork.enabled }}
    image: "{{ .Values.stork.image.repository }}:{{ default .Chart.AppVersion .Values.stork.image.tag }}"
    {{- with .Values.storkSpec.volumes }}
    volumes:
      {{- toYaml . | nindent 4 }}
    {{- end -}}
    {{- with .Values.storkSpec.extraArgs }}
    args:
      {{- toYaml . | nindent 4 }}
    {{- end }}
  volumes:
  - name: tmp
    emptyDir: {}
  {{- if .Values.OKEInstall }}
  - name: ociapikey
    mountPath: /etc/pwx/oci_key
    secret:
      secretName: ociapikey
      items:
      - key: oci_api_key.pem
        path: oci_api_key.pem
  {{- end }}
  {{- if .Values.isTargetOSCoreOS }}
  - name: src
    mountPath: /lib/modules
    hostPath:
      path: /lib/modules
      type: Directory
  {{- end }}
  {{- if .Values.etcd.enableCerts }}
  - name: etcdcerts
    mountPath: /etc/pwx/etcdcerts
    secret:
      secretName: {{ .Values.etcd.secretName }}
      items:
      - key: ca.pem
        path: ca.pem
      - key: client.pem
        path: client.pem
      - key: client-key.pem
        path: client-key.key
  {{- end }}
  {{- with .Values.volumes }}
    {{- toYaml . | nindent 2 }}
  {{- end }}
  {{- with .Values.monitoring }}
  monitoring:
    {{- toYaml . | nindent 4 }}
  {{- end }}
  csi:
    enabled: {{ .Values.csi.enabled }}
  autopilot:
    enabled: {{ .Values.autopilot.enabled }}
  {{- with .Values.tolerations }}
  placement:
    tolerations:
      {{- toYaml . | nindent 4 }}
  {{- end }}
  deleteStrategy:
    type: {{ .Values.deleteStrategy.type }}
