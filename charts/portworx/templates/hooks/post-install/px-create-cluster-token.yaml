{{- if .Values.clusterToken.create }}
apiVersion: batch/v1
kind: Job
metadata:
  name: px-set-cluster-token
  labels:
    heritage: {{ .Release.Service | quote }}
    release: {{ .Release.Name | quote }}
    chart: "{{ .Chart.Name }}-{{ .Chart.Version }}"
    app.kubernetes.io/managed-by: {{ .Release.Service | quote }}
    app.kubernetes.io/instance: {{ .Release.Name | quote }}
  annotations:
    helm.sh/hook: post-install
    helm.sh/hook-weight: "10"
    helm.sh/hook-delete-policy: before-hook-creation,hook-succeeded
spec:
  backoffLimit: 0
  template:
    spec:
      {{- if .Values.global.image.pullSecret }}
      imagePullSecrets:
        - name: {{ .Values.global.image.pullSecret }}
      {{- end }}
      restartPolicy: Never
      serviceAccountName: {{ .Values.clusterToken.serviceAccountName }}
      containers:
        - name: post-install-job
          image: "{{ .Values.kubectl.image.repository }}:{{ default .Capabilities.KubeVersion.Version .Values.kubectl.image.tag }}"
          env:
            - name: NS
              value: {{ .Release.Namespace }}
            - name: KEY
              value: cluster-wide-secret-key
          command: ['/bin/bash', '-c']
          args:
            - |
              readyPortworxPod=$(kubectl -n $NS get pods -lname=portworx -o jsonpath='{range .items[*]}{.status.conditions[?(@.type=="Ready")].status}{" "}{.metadata.name}{"\n"}{end}' | grep True | cut -d' ' -f2 | head -n1)
              kubectl -n $NS exec -c portworx $readyPortworxPod -- /opt/pwx/bin/pxctl secrets set-cluster-key --secret $KEY
      initContainers:
        - name: post-install-job-init
          image: "{{ .Values.kubectl.image.repository }}:{{ default .Capabilities.KubeVersion.Version .Values.kubectl.image.tag }}"
          env:
            - name: NS
              value: {{ .Release.Namespace }}
          command: ['/bin/bash', '-c']
          args:
            - |
              # Get ready state of all Portworx pods (True or False)
              output=$(kubectl -n $NS get pods -l name=portworx -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}')
              # Wait until there is at least one pod and at least one of them is ready
              while [[ $(echo -n $output | wc -c) -eq 0 ]] || [[ $(echo -n $output | grep -v True) ]]; do
                sleep 5
                output=$(kubectl -n $NS get pods -l name=portworx -o 'jsonpath={..status.conditions[?(@.type=="Ready")].status}')
              done
{{- end }}