# Please uncomment and specify values for these options as per your requirements.

global:
  image:
    pullSecret: null

kubectl:
  image:
    repository: bitnami/kubectl
    # Kubernetes cluster version
    tag: null
    pullPolicy: IfNotPresent

ociMonitor:
  image:
    repository: portworx/oci-monitor
    tag: 2.13.0
    pullPolicy: Always

operator:
  enabled: true
  image:
    repository: portworx/px-operator
    tag: 23.3.0
    pullPolicy: IfNotPresent

# Deploy the Portworx cluster
deployCluster: true

# Defaults to false for installing Portworx on Openshift .
openshiftInstall: false

# Is your target OS CoreOS? Defaults to false.
isTargetOSCoreOS: false

# installation on PKS (Pivotal Container Service)
pksInstall: false

# installation on EKS.
EKSInstall: false

# installation on AKS
AKSInstall: false

# installation on OKE
OKEInstall: false

# List of ETCD endpoints for your cluster: Should be in the format etcd:http://<your-etcd-endpoint>:2379
etcd:
  endpoints: []
  # - etcd:http://<your-etcd-endpoint>:2379
  # - etcd:http://<your-etcd-other-endpoint>:2379
  certPath: null
  credentials: null
  ca: null
  cert: null
  key: null
  enableCerts: false
  secretName: null

# This is the default. please change it to your cluster name.
clusterName: mycluster

# true/false Instructs PX to use an unmounted Drive even if it has a filesystem.
usefileSystemDrive: false

# Defaults to false. Change to true and PX will use unmounted drives and partitions.
usedrivesAndPartitions: false

cloudStorage:
  deviceSpecs: []
  ## AKS example:
  # - type=Premium_LRS,size=150
  #
  ## EKS example:
  # - name: /dev/sda
  #   type: gp3
  #   size: 200

storage:
  devices: []
  # - /dev/sdb

# List of drives
drives: []
# - name: /dev/sda
#   type: gp2
#   size: 200

forceUseDisks: false
useAllWithPartitions: false
useAll: false

journalDevice: null

# The maximum number of storage nodes desired per zone, in case of cloud drive provisioning
maxStorageNodesPerZone: 0

network:
  dataInterface: null
  mgmtInterface: null

# Defaults to k8s, but can be kvdb / k8s / aws-kms / vault / ibm-kp
secretsProvider: k8s

# Name of the interface <ethX>
dataInterface: null

# Name of the interface <ethX>
managementInterface: null

# Kubernetes service type for services deployed by the Operator. Direct Values like
# 'LoadBalancer', 'NodePort' will change all services. To change the types of specific
# services, value can be specified as 'portworx-service:LoadBalancer;portworx-api:ClusterIP'
serviceType: null

# Add environment variables to the Portworx container in all Kubernetes supported formats
extraEnv:
  # - name: AWS_CA_BUNDLE
  #   value: "/etc/pwx/objectstore-cert/objectstore.pem"
  # - name: AWS_ACCESS_KEY_ID
  #   valueFrom:
  #     secretKeyRef:
  #       name: aws-creds
  #       key: access-key

# Miscellaneous arguments that will be passed to portworx verbatim. Only use this if there is
# no equivalent way to specify these options directly via a StorageCluster spec field.
miscArgs: null

# Instructs Operator to not install the default Portworx StorageClasses.
disableStorageClass: false

# Use Stork https://docs.portworx.com/scheduler/kubernetes/stork.html for hyperconvergence.
stork:
  enabled: true
  image:
    repository: portworx/stork
    tag: 2.12.0
    pullPolicy: IfNotPresent

# Optional Stork configurations
# Pass arguments to Stork container. Example: verbose='true';webhook-controller='false'
# Add volumes to Stork container. Refer the top level volumes for schema.
storkSpec:
  extraArgs: []
  volumes: []

customRegistryURL: null
registrySecret:

licenseSecret:
  name: null
  key: null

monitoring:
  prometheus:
    enabled: false
    exportMetrics: false
    alertManager:
      enabled: false
  telemetry: false

# For POC only
deployOnMaster:  false

# Enable CSI
csi:
  enabled: false

# Enable AutoPilot
autopilot:
  enabled: false

# internal KVDB
kvdb:
  authSecretName: null
  # specify a separate device to store KVDB data, only used when internalKVDB is set to true
  device: null
  internal: false

# Add volumes to Portworx container. Supported volume types: Host, Secret, ConfigMap
volumes: []
  # - name: objectstore-cert
  #   mountPath: /etc/pwx/objectstore-cert
  #   secret:
  #     secretName: objectstore-cert
  #     items:
  #     - key: objectstore.pem
  #       path: objectstore.pem

# Add tolerations
tolerations: []
  # - key: "key"
  #   operator: "Equal|Exists"
  #   value: "value"
  #   effect: "NoSchedule|PreferNoSchedule|NoExecute(1.6 only)"

serviceAccount:
  hook:
    create: true
    name: null

# Create cluster token
clusterToken:
  create: false
  secretName: px-vol-encryption
  serviceAccountName: px-create-cluster-token

# if set to true, portworx will only install on nodes with px/enabled: true label. Not required in most scenarios.
#requirePxEnabledTag: true

# Optional: Delete strategy for the portworx cluster
# Valid values: Uninstall, UninstallAndWipe
deleteStrategy:
  type: null