{{/* Setting defaults if they are omitted. */}}
{{- $pxMonitorEnabled := .Values.pxmonitor.enabled | default false }}
{{- $isOpenshiftCluster := .Capabilities.APIVersions.Has "apps.openshift.io/v1" -}}
{{- $externalPersistentStorageEnabled := .Values.persistentStorage.enabled | default false }}
{{- $storkRequired := .Values.storkRequired | default false -}}
{{- $sslEnabled := .Values.pxmonitor.sslEnabled | default false -}}
{{- if eq $pxMonitorEnabled true }}
apiVersion: v1
kind: Secret
metadata:
  name: pxcentral-cortex
  namespace: {{ .Release.Namespace }}
  labels:
    app: cortex
    release: pxcentral-cortex
data:
  cortex.yaml: YWxlcnRtYW5hZ2VyOgogIGV4dGVybmFsX3VybDogL2FwaS9wcm9tL2FsZXJ0bWFuYWdlcgphdXRoX2VuYWJsZWQ6IGZhbHNlCmNodW5rX3N0b3JlOgogIGNodW5rX2NhY2hlX2NvbmZpZzoKICAgIG1lbWNhY2hlZDoKICAgICAgZXhwaXJhdGlvbjogMWgKICAgIG1lbWNhY2hlZF9jbGllbnQ6CiAgICAgIHRpbWVvdXQ6IDFzCiAgbWF4X2xvb2tfYmFja19wZXJpb2Q6IDBzCmRpc3RyaWJ1dG9yOgogIHBvb2w6CiAgICBoZWFsdGhfY2hlY2tfaW5nZXN0ZXJzOiB0cnVlCiAgc2hhcmRfYnlfYWxsX2xhYmVsczogdHJ1ZQpmcm9udGVuZDoKICBjb21wcmVzc19yZXNwb25zZXM6IHRydWUKICBsb2dfcXVlcmllc19sb25nZXJfdGhhbjogMTBzCmluZ2VzdGVyOgogIGxpZmVjeWNsZXI6CiAgICBmaW5hbF9zbGVlcDogMHMKICAgIGpvaW5fYWZ0ZXI6IDBzCiAgICBudW1fdG9rZW5zOiA1MTIKICAgIHJpbmc6CiAgICAgIGt2c3RvcmU6CiAgICAgICAgY29uc3VsOgogICAgICAgICAgY29uc2lzdGVudF9yZWFkczogdHJ1ZQogICAgICAgICAgaG9zdDogcHhjZW50cmFsLWNvcnRleC1jb25zdWw6ODUwMAogICAgICAgICAgaHR0cF9jbGllbnRfdGltZW91dDogMjBzCiAgICAgICAgcHJlZml4OiBjb2xsZWN0b3JzLwogICAgICAgIHN0b3JlOiBjb25zdWwKICAgICAgcmVwbGljYXRpb25fZmFjdG9yOiAxCiAgbWF4X3RyYW5zZmVyX3JldHJpZXM6IDAKaW5nZXN0ZXJfY2xpZW50OgogIGdycGNfY2xpZW50X2NvbmZpZzoKICAgIG1heF9yZWN2X21zZ19zaXplOiAxMDQ4NTc2MDAKICAgIG1heF9zZW5kX21zZ19zaXplOiAxMDQ4NTc2MDAKICAgIHVzZV9nemlwX2NvbXByZXNzaW9uOiB0cnVlCmxpbWl0czoKICBlbmZvcmNlX21ldHJpY19uYW1lOiBmYWxzZQogIHJlamVjdF9vbGRfc2FtcGxlczogdHJ1ZQogIHJlamVjdF9vbGRfc2FtcGxlc19tYXhfYWdlOiAxNjhoCnF1ZXJpZXI6CiAgYWN0aXZlX3F1ZXJ5X3RyYWNrZXJfZGlyOiAvZGF0YS9jb3J0ZXgvcXVlcmllcgogIHF1ZXJ5X2luZ2VzdGVyc193aXRoaW46IDEyaApxdWVyeV9yYW5nZToKICBhbGlnbl9xdWVyaWVzX3dpdGhfc3RlcDogdHJ1ZQogIGNhY2hlX3Jlc3VsdHM6IHRydWUKICByZXN1bHRzX2NhY2hlOgogICAgY2FjaGU6CiAgICAgIG1lbWNhY2hlZDoKICAgICAgICBleHBpcmF0aW9uOiAxaAogICAgICBtZW1jYWNoZWRfY2xpZW50OgogICAgICAgIHRpbWVvdXQ6IDFzCiAgc3BsaXRfcXVlcmllc19ieV9pbnRlcnZhbDogMjRoCnJ1bGVyOgogIGVuYWJsZV9hbGVydG1hbmFnZXJfZGlzY292ZXJ5OiBmYWxzZQpzY2hlbWE6CiAgY29uZmlnczoKICAtIGZyb206ICIyMDE5LTA3LTI5IgogICAgaW5kZXg6CiAgICAgIHBlcmlvZDogMTY4aAogICAgICBwcmVmaXg6IGluZGV4XwogICAgb2JqZWN0X3N0b3JlOiBjYXNzYW5kcmEKICAgIHNjaGVtYTogdjEwCiAgICBzdG9yZTogY2Fzc2FuZHJhCnNlcnZlcjoKICBncnBjX2xpc3Rlbl9wb3J0OiA5MDk1CiAgZ3JwY19zZXJ2ZXJfbWF4X2NvbmN1cnJlbnRfc3RyZWFtczogMTAwMAogIGdycGNfc2VydmVyX21heF9yZWN2X21zZ19zaXplOiAxMDQ4NTc2MDAKICBncnBjX3NlcnZlcl9tYXhfc2VuZF9tc2dfc2l6ZTogMTA0ODU3NjAwCiAgaHR0cF9saXN0ZW5fcG9ydDogODA4MApzdG9yYWdlOgogIGF6dXJlOgogICAgYWNjb3VudF9rZXk6IG51bGwKICAgIGFjY291bnRfbmFtZTogbnVsbAogICAgY29udGFpbmVyX25hbWU6IG51bGwKICBjYXNzYW5kcmE6CiAgICBhZGRyZXNzZXM6IHB4Y2VudHJhbC1jb3J0ZXgtY2Fzc2FuZHJhOjkwNDIKICAgIGF1dGg6IHRydWUKICAgIGtleXNwYWNlOiBjb3J0ZXgKICAgIHBhc3N3b3JkOiBjYXNzYW5kcmEKICAgIHVzZXJuYW1lOiBjYXNzYW5kcmEKICBlbmdpbmU6IGNodW5rcwogIGluZGV4X3F1ZXJpZXNfY2FjaGVfY29uZmlnOgogICAgbWVtY2FjaGVkOgogICAgICBleHBpcmF0aW9uOiAxaAogICAgbWVtY2FjaGVkX2NsaWVudDoKICAgICAgdGltZW91dDogMXMKdGFibGVfbWFuYWdlcjoKICByZXRlbnRpb25fZGVsZXRlc19lbmFibGVkOiBmYWxzZQogIHJldGVudGlvbl9wZXJpb2Q6IDBz
---
kind: ConfigMap
apiVersion: v1
metadata:
  name: pxcentral-cortex-nginx
  namespace: {{ .Release.Namespace }}
  labels:
    app: cortex-nginx
    release: pxcentral-cortex
{{- include "px-monitor.labels" . | nindent 4 }}
data:
  nginx.conf: |-
    worker_processes  5;  ## Default: 1
    error_log  /dev/stderr;
    pid        /tmp/nginx.pid;
    worker_rlimit_nofile 8192;

    events {
      worker_connections  4096;  ## Default: 1024
    }


    http {
      default_type application/octet-stream;
      log_format   main '$remote_addr - $remote_user [$time_local]  $status '
        '"$request" $body_bytes_sent "$http_referer" '
        '"$http_user_agent" "$http_x_forwarded_for" $http_x_scope_orgid';
      access_log   /dev/stderr  main;
      sendfile     on;
      tcp_nopush   on;
      resolver 127.0.0.1:53 ipv6=off valid=10s;

      server { # simple reverse-proxy
        listen 80;
        #proxy_set_header X-Scope-OrgID 0;
        proxy_connect_timeout 300s;
        proxy_send_timeout 300s;
        proxy_read_timeout 300s;

        location = /healthz {
          return 200 'alive';
        }

        # Distributor Config
        location = /ring {
          proxy_pass      http://pxcentral-cortex-distributor.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}:8080$request_uri;
        }

        location = /all_user_stats {
          proxy_pass      http://pxcentral-cortex-distributor.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}:8080$request_uri;
        }

        location = /api/prom/push {
          proxy_pass      http://pxcentral-cortex-distributor.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}:8080$request_uri;
        }

        # Query Config
        location ~ /api/prom/.* {
          proxy_pass      http://pxcentral-cortex-query-frontend.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}:8080$request_uri;
        }

        # Alertmanager Config
        location ~ /api/prom/alertmanager/.* {
          proxy_pass      http://pxcentral-cortex-alertmanager.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}:8080$request_uri;
        }

        location ~ /api/v1/alerts {
          proxy_pass      http://pxcentral-cortex-alertmanager.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}:8080$request_uri;
        }

        location ~ /multitenant_alertmanager/status {
          proxy_pass      http://pxcentral-cortex-alertmanager.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}:8080$request_uri;
        }

        # Ruler Config
        location ~ /api/v1/rules {
          proxy_pass      http://pxcentral-cortex-ruler.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}:8080$request_uri;
        }

        location ~ /ruler/ring {
          proxy_pass      http://pxcentral-cortex-ruler.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}:8080$request_uri;
        }

        # Config Config
        location ~ /api/prom/configs/.* {
          proxy_pass      http://pxcentral-cortex-configs.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}:8080$request_uri;
        }
      }
    }
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: pxcentral-cortex
  namespace: {{ .Release.Namespace }}
  labels:
    app: cortex
    release: pxcentral-cortex
{{- include "px-monitor.labels" . | nindent 4 }}
rules:
- apiGroups:      ['extensions']
  resources:      ['podsecuritypolicies']
  verbs:          ['use']
  resourceNames:  [pxcentral-cortex]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: pxcentral-cortex
  namespace: {{ .Release.Namespace }}
  labels:
    app: cortex
    release: pxcentral-cortex
{{- include "px-monitor.labels" . | nindent 4 }}
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: pxcentral-cortex
subjects:
- kind: ServiceAccount
  name: pxcentral-cortex
---
apiVersion: v1
kind: Service
metadata:
  name: pxcentral-cortex-alertmanager-headless
  namespace: {{ .Release.Namespace }}
  labels:
    app: cortex-alertmanager
    release: pxcentral-cortex
{{- include "px-monitor.labels" . | nindent 4 }}
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - port: 8080
      protocol: TCP
      name: http-metrics
    - port: 9094
      protocol: TCP
      name: cluster
  selector:
    app: cortex-alertmanager
    release: pxcentral-cortex
---
apiVersion: v1
kind: Service
metadata:
  name: pxcentral-cortex-alertmanager
  namespace: {{ .Release.Namespace }}
  labels:
    app: cortex-alertmanager
    release: pxcentral-cortex
{{- include "px-monitor.labels" . | nindent 4 }}
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
  selector:
    app: cortex-alertmanager
    release: pxcentral-cortex
---
apiVersion: v1
kind: Service
metadata:
  name: pxcentral-cortex-configs
  namespace: {{ .Release.Namespace }}
  labels:
    app: cortex-configs
    release: pxcentral-cortex
{{- include "px-monitor.labels" . | nindent 4 }}
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
  selector:
    app: cortex-configs
    release: pxcentral-cortex
---
apiVersion: v1
kind: Service
metadata:
  name: pxcentral-cortex-distributor
  namespace: {{ .Release.Namespace }}
  labels:
    app: cortex-distributor
    release: pxcentral-cortex
{{- include "px-monitor.labels" . | nindent 4 }}
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
  selector:
    app: cortex-distributor
    release: pxcentral-cortex
---
apiVersion: v1
kind: Service
metadata:
  name: pxcentral-cortex-ingester
  namespace: {{ .Release.Namespace }}
  labels:
    app: cortex-ingester
    release: pxcentral-cortex
{{- include "px-monitor.labels" . | nindent 4 }}
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
  selector:
    app: cortex-ingester
    release: pxcentral-cortex
---
apiVersion: v1
kind: Service
metadata:
  name: pxcentral-cortex-querier
  namespace: {{ .Release.Namespace }}
  labels:
    app: cortex-querier
    release: pxcentral-cortex
{{- include "px-monitor.labels" . | nindent 4 }}
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
  selector:
    app: cortex-querier
    release: pxcentral-cortex
---
apiVersion: v1
kind: Service
metadata:
  name: pxcentral-cortex-query-frontend-headless
  namespace: {{ .Release.Namespace }}
  labels:
    app: cortex-query-frontend
    release: pxcentral-cortex
{{- include "px-monitor.labels" . | nindent 4 }}
spec:
  type: ClusterIP
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - port: 8080
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
    - port: 9095
      protocol: TCP
      name: grpclb
      targetPort: grpc
  selector:
    app: cortex-query-frontend
    release: pxcentral-cortex
---
apiVersion: v1
kind: Service
metadata:
  name: pxcentral-cortex-consul
  namespace: {{ .Release.Namespace }}
  labels:
    cortex: consul
{{- include "px-monitor.labels" . | nindent 4 }}
spec:
  ports:
  - name: http
    port: 8500
  selector:
    app: cortex-consul
---
apiVersion: v1
kind: Service
metadata:
  name: pxcentral-cortex-query-frontend
  namespace: {{ .Release.Namespace }}
  labels:
    app: cortex-query-frontend
    release: pxcentral-cortex
{{- include "px-monitor.labels" . | nindent 4 }}
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
    - port: 9095
      protocol: TCP
      name: grpclb
      targetPort: grpc
  selector:
    app: cortex-query-frontend
    release: pxcentral-cortex
---
apiVersion: v1
kind: Service
metadata:
  name: pxcentral-cortex-ruler
  namespace: {{ .Release.Namespace }}
  labels:
    app: cortex-ruler
    release: pxcentral-cortex
{{- include "px-monitor.labels" . | nindent 4 }}
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
  selector:
    app: cortex-ruler
    release: pxcentral-cortex
---
apiVersion: v1
kind: Service
metadata:
  name: pxcentral-cortex-table-manager
  namespace: {{ .Release.Namespace }}
  labels:
    app: cortex-table-manager
    release: pxcentral-cortex
{{- include "px-monitor.labels" . | nindent 4 }}
spec:
  type: ClusterIP
  ports:
    - port: 8080
      protocol: TCP
      name: http-metrics
      targetPort: http-metrics
  selector:
    app: cortex-table-manager
    release: pxcentral-cortex
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pxcentral-cortex-configs
  namespace: {{ .Release.Namespace }}
  labels:
    app: cortex-configs
    release: pxcentral-cortex
{{- include "px-monitor.labels" . | nindent 4 }}
spec:
  replicas: 1
  revisionHistoryLimit: 0
  selector:
    matchLabels:
      app: cortex-configs
      release: pxcentral-cortex
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: cortex-configs
        name: cortex-configs
        target: configs
        release: pxcentral-cortex
      annotations:
        prometheus.io/port: http-metrics
        prometheus.io/scrape: "true"
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              {{- if .Values.pxmonitor.nodeAffinityLabel }}
              - key: {{ .Values.pxmonitor.nodeAffinityLabel }}
                operator: Exists
              {{- else }}
              - key: pxmonitor/enabled
                operator: NotIn
                values:
                - "false"
              {{- end }}
      serviceAccountName: px-monitor
      {{- if .Values.images.pullSecrets }}
      imagePullSecrets:
        {{- range $sec := .Values.images.pullSecrets }}
        - name: {{ $sec | quote }}
        {{- end }}
      {{- end }}
      containers:
        - name: cortex
          image: {{ printf "%s/%s/%s:%s" .Values.images.cortexImage.registry .Values.images.cortexImage.repo .Values.images.cortexImage.imageName .Values.images.cortexImage.tag }}
          imagePullPolicy: {{ .Values.images.pullPolicy }}
          args:
            - "-target=configs"
            - "-config.file=/etc/cortex/cortex.yaml"
            - "-configs.database.uri=memory://"
          volumeMounts:
            - name: config
              mountPath: /etc/cortex
              subPath: 
          ports:
            - name: http-metrics
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 45
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 45
          securityContext:
            readOnlyRootFilesystem: true
      volumes:
        - name: config
          secret:
            secretName: pxcentral-cortex
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pxcentral-cortex-distributor
  namespace: {{ .Release.Namespace }}
  labels:
    app: cortex-distributor
    release: pxcentral-cortex
{{- include "px-monitor.labels" . | nindent 4 }}
spec:
  replicas: 2
  revisionHistoryLimit: 0
  selector:
    matchLabels:
      app: cortex-distributor
      release: pxcentral-cortex
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: cortex-distributor
        name: cortex-distributor
        target: distributor
        release: pxcentral-cortex
      annotations:
        prometheus.io/port: http-metrics
        prometheus.io/scrape: "true"
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              {{- if .Values.pxmonitor.nodeAffinityLabel }}
              - key: {{ .Values.pxmonitor.nodeAffinityLabel }}
                operator: Exists
              {{- else }}
              - key: pxmonitor/enabled
                operator: NotIn
                values:
                - "false"
              {{- end }}
      serviceAccountName: px-monitor
      {{- if .Values.images.pullSecrets }}
      imagePullSecrets:
        {{- range $sec := .Values.images.pullSecrets }}
        - name: {{ $sec | quote }}
        {{- end }}
      {{- end }}
      containers:
        - name: cortex
          image: {{ printf "%s/%s/%s:%s" .Values.images.cortexImage.registry .Values.images.cortexImage.repo .Values.images.cortexImage.imageName .Values.images.cortexImage.tag }}
          imagePullPolicy: {{ .Values.images.pullPolicy }}
          args:
            - "-target=distributor"
            - "-config.file=/etc/cortex/cortex.yaml"
          volumeMounts:
            - name: config
              mountPath: /etc/cortex
            - name: storage
              mountPath: "/data"
              subPath: 
          ports:
            - name: http-metrics
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 45
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 45
      volumes:
        - name: config
          secret:
            secretName: pxcentral-cortex
        - name: storage
          emptyDir: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pxcentral-cortex-nginx
  namespace: {{ .Release.Namespace }}
  labels:
    name: nginx
    app: cortex-nginx
    cortex: nginx
    app.kubernetes.io/component: pxcentral-cortex
{{- include "px-monitor.labels" . | nindent 4 }}
spec:
  replicas: 2
  revisionHistoryLimit: 0
  selector:
    matchLabels:
      app: cortex-nginx
      name: nginx
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: cortex-nginx
        name: nginx
        app.kubernetes.io/component: pxcentral-cortex
      annotations:
        prometheus.io/port: http-metrics
        prometheus.io/scrape: ""
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              {{- if .Values.pxmonitor.nodeAffinityLabel }}
              - key: {{ .Values.pxmonitor.nodeAffinityLabel }}
                operator: Exists
              {{- else }}
              - key: pxmonitor/enabled
                operator: NotIn
                values:
                - "false"
              {{- end }}
      serviceAccountName: px-monitor
      {{- if .Values.images.pullSecrets }}
      imagePullSecrets:
        {{- range $sec := .Values.images.pullSecrets }}
        - name: {{ $sec | quote }}
        {{- end }}
      {{- end }}
      containers:
        - name: nginx
          image: {{ .Values.images.proxyConfigImage.registry }}/{{ .Values.images.proxyConfigImage.repo }}/{{ .Values.images.proxyConfigImage.imageName }}:{{ .Values.images.proxyConfigImage.tag }}
          imagePullPolicy: {{ .Values.images.pullPolicy }}
          volumeMounts:
            - name: config
              mountPath: /etc/nginx
          ports:
            - name: http
              containerPort: 80
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /healthz
              port: http
            initialDelaySeconds: 10
          readinessProbe:
            httpGet:
              path: /healthz
              port: http
            initialDelaySeconds: 10
        - name: dnsmasq
          image: {{ printf "%s/%s/%s:%s" .Values.images.dnsmasqImage.registry .Values.images.dnsmasqImage.repo .Values.images.dnsmasqImage.imageName .Values.images.dnsmasqImage.tag }}
          imagePullPolicy: {{ .Values.images.pullPolicy }}
          args:
            - --listen
            - "127.0.0.1:53"
            - --default-resolver
            - --append-search-domains
      volumes:
        - name: config
          configMap:
            name: pxcentral-cortex-nginx
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pxcentral-cortex-querier
  namespace: {{ .Release.Namespace }}
  labels:
    app: cortex-querier
    release: pxcentral-cortex
{{- include "px-monitor.labels" . | nindent 4 }}
spec:
  replicas: 2
  revisionHistoryLimit: 0
  selector:
    matchLabels:
      app: cortex-querier
      release: pxcentral-cortex
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: cortex-querier
        name: cortex-querier
        target: querier
        release: pxcentral-cortex
      annotations:
        prometheus.io/port: http-metrics
        prometheus.io/scrape: "true"
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              {{- if .Values.pxmonitor.nodeAffinityLabel }}
              - key: {{ .Values.pxmonitor.nodeAffinityLabel }}
                operator: Exists
              {{- else }}
              - key: pxmonitor/enabled
                operator: NotIn
                values:
                - "false"
              {{- end }}
      serviceAccountName: px-monitor
      {{- if .Values.images.pullSecrets }}
      imagePullSecrets:
        {{- range $sec := .Values.images.pullSecrets }}
        - name: {{ $sec | quote }}
        {{- end }}
      {{- end }}
      containers:
        - name: cortex
          image: {{ printf "%s/%s/%s:%s" .Values.images.cortexImage.registry .Values.images.cortexImage.repo .Values.images.cortexImage.imageName .Values.images.cortexImage.tag }}
          imagePullPolicy: {{ .Values.images.pullPolicy }}
          args:
            - "-target=querier"
            - "-config.file=/etc/cortex/cortex.yaml"
            - "-querier.frontend-address=pxcentral-cortex-query-frontend-headless.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}:"
            - "-store.chunks-cache.memcached.addresses=dns+pxcentral-memcached.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}:11211"
            - "-store.index-cache-read.memcached.addresses=dns+pxcentral-memcached-index-read.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}:11211"
          volumeMounts:
            - name: config
              mountPath: /etc/cortex
            - name: storage
              mountPath: "/data"
              subPath: 
          ports:
            - name: http-metrics
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 45
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 45
      volumes:
        - name: config
          secret:
            secretName: pxcentral-cortex
        - name: storage
          emptyDir: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pxcentral-cortex-query-frontend
  namespace: {{ .Release.Namespace }}
  labels:
    app: cortex-query-frontend
    release: pxcentral-cortex
{{- include "px-monitor.labels" . | nindent 4 }}
spec:
  replicas: 2
  revisionHistoryLimit: 0
  selector:
    matchLabels:
      app: cortex-query-frontend
      release: pxcentral-cortex
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: cortex-query-frontend
        name: cortex-query-frontend
        target: query-frontend
        release: pxcentral-cortex
      annotations:
        prometheus.io/port: http-metrics
        prometheus.io/scrape: "true"
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              {{- if .Values.pxmonitor.nodeAffinityLabel }}
              - key: {{ .Values.pxmonitor.nodeAffinityLabel }}
                operator: Exists
              {{- else }}
              - key: pxmonitor/enabled
                operator: NotIn
                values:
                - "false"
              {{- end }}
      serviceAccountName: px-monitor
      {{- if .Values.images.pullSecrets }}
      imagePullSecrets:
        {{- range $sec := .Values.images.pullSecrets }}
        - name: {{ $sec | quote }}
        {{- end }}
      {{- end }}
      containers:
        - name: cortex
          image: {{ printf "%s/%s/%s:%s" .Values.images.cortexImage.registry .Values.images.cortexImage.repo .Values.images.cortexImage.imageName .Values.images.cortexImage.tag }}
          imagePullPolicy: {{ .Values.images.pullPolicy }}
          args:
            - "-target=query-frontend"
            - "-config.file=/etc/cortex/cortex.yaml"
          volumeMounts:
            - name: config
              mountPath: /etc/cortex
          ports:
            - name: http-metrics
              containerPort: 8080
              protocol: TCP
            - name: grpc
              containerPort: 9095
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 45
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 45
      volumes:
        - name: config
          secret:
            secretName: pxcentral-cortex
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pxcentral-cortex-ruler
  namespace: {{ .Release.Namespace }}
  labels:
    app: cortex-ruler
    release: pxcentral-cortex
{{- include "px-monitor.labels" . | nindent 4 }}
spec:
  replicas: 1
  revisionHistoryLimit: 0
  selector:
    matchLabels:
      app: cortex-ruler
      release: pxcentral-cortex
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: cortex-ruler
        name: cortex-ruler
        target: ruler
        release: pxcentral-cortex
      annotations:
        prometheus.io/port: http-metrics
        prometheus.io/scrape: "true"
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              {{- if .Values.pxmonitor.nodeAffinityLabel }}
              - key: {{ .Values.pxmonitor.nodeAffinityLabel }}
                operator: Exists
              {{- else }}
              - key: pxmonitor/enabled
                operator: NotIn
                values:
                - "false"
              {{- end }}
      serviceAccountName: px-monitor
      {{- if .Values.images.pullSecrets }}
      imagePullSecrets:
        {{- range $sec := .Values.images.pullSecrets }}
        - name: {{ $sec | quote }}
        {{- end }}
      {{- end }}
      containers:
        - name: cortex
          image: {{ printf "%s/%s/%s:%s" .Values.images.cortexImage.registry .Values.images.cortexImage.repo .Values.images.cortexImage.imageName .Values.images.cortexImage.tag }}
          imagePullPolicy: {{ .Values.images.pullPolicy }}
          args:
            - "-target=ruler"
            - "-config.file=/etc/cortex/cortex.yaml"
            - "-ruler.configs.url=http://pxcentral-cortex-configs.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}:8080"
            - "-ruler.alertmanager-url=http://pxcentral-cortex-alertmanager.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}:8080/api/prom/alertmanager/"
            - -store.chunks-cache.memcached.addresses=dns+pxcentral-memcached.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}:11211
            - -store.chunks-cache.memcached.timeout=100ms
          volumeMounts:
            - name: config
              mountPath: /etc/cortex
            - name: storage
              mountPath: "/data"
              subPath: 
          ports:
            - name: http-metrics
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 45
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 45
      volumes:
        - name: config
          secret:
            secretName: pxcentral-cortex
        - name: storage
          emptyDir: {}
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: pxcentral-cortex-table-manager
  namespace: {{ .Release.Namespace }}
  labels:
    app: cortex-table-manager
    release: pxcentral-cortex
{{- include "px-monitor.labels" . | nindent 4 }}
spec:
  replicas: 1
  revisionHistoryLimit: 0
  selector:
    matchLabels:
      app: cortex-table-manager
      release: pxcentral-cortex
  strategy:
    rollingUpdate:
      maxSurge: 0
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: cortex-table-manager
        name: cortex-table-manager
        target: table-manager
        release: pxcentral-cortex
      annotations:
        prometheus.io/port: http-metrics
        prometheus.io/scrape: "true"
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              {{- if .Values.pxmonitor.nodeAffinityLabel }}
              - key: {{ .Values.pxmonitor.nodeAffinityLabel }}
                operator: Exists
              {{- else }}
              - key: pxmonitor/enabled
                operator: NotIn
                values:
                - "false"
              {{- end }}
      serviceAccountName: px-monitor
      {{- if .Values.images.pullSecrets }}
      imagePullSecrets:
        {{- range $sec := .Values.images.pullSecrets }}
        - name: {{ $sec | quote }}
        {{- end }}
      {{- end }}
      containers:
        - name: cortex
          image: {{ printf "%s/%s/%s:%s" .Values.images.cortexImage.registry .Values.images.cortexImage.repo .Values.images.cortexImage.imageName .Values.images.cortexImage.tag }}
          imagePullPolicy: {{ .Values.images.pullPolicy }}
          args:
            - "-target=table-manager"
            - "-config.file=/etc/cortex/cortex.yaml"
          volumeMounts:
            - name: config
              mountPath: /etc/cortex
            - name: storage
              mountPath: "/data"
              subPath: 
          ports:
            - name: http-metrics
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 45
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 45
      volumes:
        - name: config
          secret:
            secretName: pxcentral-cortex
        - name: storage
          emptyDir: {}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: pxcentral-cortex-alertmanager
  namespace: {{ .Release.Namespace }}
  labels:
    app: cortex-alertmanager
    release: pxcentral-cortex
{{- include "px-monitor.labels" . | nindent 4 }}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: cortex-alertmanager
      release: pxcentral-cortex
  updateStrategy:
    type: RollingUpdate          
  serviceName: pxcentral-cortex-alertmanager
  {{- if eq $externalPersistentStorageEnabled true }}
  volumeClaimTemplates:
    - metadata:
        name: storage
      spec:
        {{- if .Values.persistentStorage.storageClassName }}
        storageClassName: {{ .Values.persistentStorage.storageClassName }}
        {{- end }}
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: {{ .Values.persistentStorage.alertManager.storage }}
  {{- end }}
  template:
    metadata:
      labels:
        app: cortex-alertmanager
        name: cortex-alertmanager
        target: alertmanager
        release: pxcentral-cortex
      annotations:
        prometheus.io/port: http-metrics
        prometheus.io/scrape: "true"
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              {{- if .Values.pxmonitor.nodeAffinityLabel }}
              - key: {{ .Values.pxmonitor.nodeAffinityLabel }}
                operator: Exists
              {{- else }}
              - key: pxmonitor/enabled
                operator: NotIn
                values:
                - "false"
              {{- end }}
      {{- if eq $storkRequired true }}
      schedulerName: stork
      {{- end }}
      {{- if $isOpenshiftCluster }}
      {{- else }}
      securityContext:
{{ toYaml .Values.securityContext | indent 8 }}
      {{- end }}
      serviceAccountName: px-monitor
      {{- if .Values.images.pullSecrets }}
      imagePullSecrets:
        {{- range $sec := .Values.images.pullSecrets }}
        - name: {{ $sec | quote }}
        {{- end }}
      {{- end }}
      volumes:
        - name: config
          secret:
            secretName: pxcentral-cortex
        {{- if eq $externalPersistentStorageEnabled false }}
        - name: storage
          emptyDir: {}
        {{- end }}
      containers:
        - name: cortex
          image: {{ printf "%s/%s/%s:%s" .Values.images.cortexImage.registry .Values.images.cortexImage.repo .Values.images.cortexImage.imageName .Values.images.cortexImage.tag }}
          imagePullPolicy: {{ .Values.images.pullPolicy }}
          args:
            - "-target=alertmanager"
            - "-config.file=/etc/cortex/cortex.yaml"
            - "-alertmanager.configs.url=http://pxcentral-cortex-configs.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}:8080"
          volumeMounts:
            - name: config
              mountPath: /etc/cortex
            - name: storage
              mountPath: "/data"
          ports:
            - name: http-metrics
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 45
          readinessProbe:
            httpGet:
              path: /ready
              port: http-metrics
            initialDelaySeconds: 45
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: pxcentral-cortex-ingester
  namespace: {{ .Release.Namespace }}
  labels:
    app: cortex-ingester
    release: pxcentral-cortex
{{- include "px-monitor.labels" . | nindent 4 }}
spec:
  replicas: 3
  selector:
    matchLabels:
      app: cortex-ingester
      release: pxcentral-cortex
  updateStrategy:
    type: RollingUpdate          
  serviceName: pxcentral-cortex-ingester
  {{- if eq $externalPersistentStorageEnabled true }}
  volumeClaimTemplates:
    - metadata:
        name: storage
      spec:
        {{- if .Values.persistentStorage.storageClassName }}
        storageClassName: {{ .Values.persistentStorage.storageClassName }}
        {{- end }}
        accessModes:
          - ReadWriteOnce
        resources:
          requests:
            storage: {{ .Values.persistentStorage.ingester.storage }}
  {{- end }}
  template:
    metadata:
      labels:
        app: cortex-ingester
        name: cortex-ingester
        target: ingester
        release: pxcentral-cortex
      annotations:
        prometheus.io/port: http-metrics
        prometheus.io/scrape: "true"
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              {{- if .Values.pxmonitor.nodeAffinityLabel }}
              - key: {{ .Values.pxmonitor.nodeAffinityLabel }}
                operator: Exists
              {{- else }}
              - key: pxmonitor/enabled
                operator: NotIn
                values:
                - "false"
              {{- end }}
      {{- if eq $storkRequired true }}
      schedulerName: stork
      {{- end }}
      {{- if $isOpenshiftCluster }}
      {{- else }}
      securityContext:
{{ toYaml .Values.securityContext | indent 8 }}
      {{- end }}
      serviceAccountName: px-monitor
      {{- if .Values.images.pullSecrets }}
      imagePullSecrets:
        {{- range $sec := .Values.images.pullSecrets }}
        - name: {{ $sec | quote }}
        {{- end }}
      {{- end }}
      volumes:
        - name: config
          secret:
            secretName: pxcentral-cortex
        {{- if eq $externalPersistentStorageEnabled false }}
        - name: storage
          emptyDir: {}
        {{- end }}
      containers:
        - name: cortex
          image: {{ printf "%s/%s/%s:%s" .Values.images.cortexImage.registry .Values.images.cortexImage.repo .Values.images.cortexImage.imageName .Values.images.cortexImage.tag }}
          imagePullPolicy: {{ .Values.images.pullPolicy }}
          args:
            - "-target=ingester"
            - "-config.file=/etc/cortex/cortex.yaml"
            - -store.chunks-cache.memcached.addresses=dns+pxcentral-memcached.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}:11211
            - -store.index-cache-write.memcached.addresses=dns+pxcentral-memcached-index-write.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}:11211
          volumeMounts:
            - name: config
              mountPath: /etc/cortex
            - name: storage
              mountPath: "/data"
          ports:
            - name: http-metrics
              containerPort: 8080
              protocol: TCP
          livenessProbe:
            failureThreshold: 20
            httpGet:
              path: /ready
              port: http-metrics
              scheme: HTTP
            initialDelaySeconds: 180
            periodSeconds: 30
            successThreshold: 1
            timeoutSeconds: 1
{{- end -}}
