{{/* Setting defaults if they are omitted. */}}
{{- $pxMonitorEnabled := .Values.pxmonitor.enabled | default false }}
{{- $isOpenshiftCluster := .Capabilities.APIVersions.Has "apps.openshift.io/v1" -}}
{{- $externalPersistentStorageEnabled := .Values.persistentStorage.enabled | default false }}
{{- $storkRequired := .Values.storkRequired | default false -}}
{{- $sslEnabled := .Values.pxmonitor.sslEnabled | default false -}}
{{- if eq $pxMonitorEnabled true }}
apiVersion: v1
kind: Secret
metadata:
  name: pxcentral-cortex-cassandra
  namespace: {{ .Release.Namespace }}
  labels:
    app: cassandra
    release: pxcentral-cortex-cassandra
{{- include "px-monitor.labels" . | nindent 4 }}
type: Opaque
stringData:
  CASSANDRA_USER: {{ .Values.cassandraUsername }}
  CASSANDRA_PASSWORD: {{ .Values.cassandraPassword }}
---
apiVersion: v1
kind: Service
metadata:
  name: pxcentral-cortex-cassandra-headless
  namespace: {{ .Release.Namespace }}
  labels:
    app: cassandra
    release: pxcentral-cortex-cassandra
{{- include "px-monitor.labels" . | nindent 4 }}
spec:
  clusterIP: None
  publishNotReadyAddresses: true
  ports:
    - name: intra
      port: 7000
      targetPort: intra
    - name: tls
      port: 7001
      targetPort: tls
    - name: jmx
      port: 7199
      targetPort: jmx
    - name: cql
      port: 9042
      targetPort: cql
    - name: thrift
      port: 9160
      targetPort: thrift
  selector:
    app: cassandra
    release: pxcentral-cortex-cassandra
---
apiVersion: v1
kind: Service
metadata:
  name: pxcentral-cortex-cassandra
  namespace: {{ .Release.Namespace }}
  labels:
    app: cassandra
    release: pxcentral-cortex-cassandra
{{- include "px-monitor.labels" . | nindent 4 }}
spec:
  type: ClusterIP
  ports:
    - name: cql
      port: 9042
      targetPort: cql
    - name: thrift
      port: 9160
      targetPort: thrift
  selector:
    app: cassandra
    release: pxcentral-cortex-cassandra
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: pxcentral-cortex-cassandra
  namespace: {{ .Release.Namespace }}
  labels:
    app: cassandra
    release: pxcentral-cortex-cassandra
spec:
  selector:
    matchLabels:
      app: cassandra
      release: pxcentral-cortex-cassandra
  serviceName: pxcentral-cortex-cassandra-headless
  replicas: 3
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app: cassandra
        release: pxcentral-cortex-cassandra
    spec:
      {{- if eq .Values.storkRequired true }}
      schedulerName: stork
      {{- end }}
      {{- if $isOpenshiftCluster}}
      {{- else }}
      securityContext:
{{ toYaml .Values.securityContext | indent 8 }}
      {{- end }}
      containers:
        - name: cassandra
          command:
            - bash
            - -ec
            - |
              if [[ $HOSTNAME =~ (.*)-0$ ]]; then
                echo "Setting node as password seeder"
                export CASSANDRA_PASSWORD_SEEDER=yes
              else
                # Only node 0 will execute the startup initdb scripts
                export CASSANDRA_IGNORE_INITDB_SCRIPTS=1
              fi
              /entrypoint.sh /run.sh
          image: {{ printf "%s/%s/%s:%s" .Values.images.cassandraImage.registry .Values.images.cassandraImage.repo .Values.images.cassandraImage.imageName .Values.images.cassandraImage.tag }}
          imagePullPolicy: {{ .Values.images.pullPolicy }}
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: CASSANDRA_CLUSTER_NAME
              value: cassandra
            - name: CASSANDRA_SEEDS
              value: "pxcentral-cortex-cassandra-0.pxcentral-cortex-cassandra-headless.{{ .Release.Namespace }}.svc.{{ .Values.clusterDomain }}"
            - name: CASSANDRA_USER
              valueFrom:
                secretKeyRef:
                  name: pxcentral-cortex-cassandra
                  key: CASSANDRA_USER
            - name: CASSANDRA_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: pxcentral-cortex-cassandra
                  key: CASSANDRA_PASSWORD
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
            - name: CASSANDRA_NUM_TOKENS
              value: "256"
            - name: CASSANDRA_FORCE_PASSWORD
              value: "true"
            - name: CASSANDRA_DATACENTER
              value: dc1
            - name: CASSANDRA_ENDPOINT_SNITCH
              value: SimpleSnitch
            - name: CASSANDRA_ENDPOINT_SNITCH
              value: SimpleSnitch
            - name: CASSANDRA_RACK
              value: rack1
            - name: CASSANDRA_ENABLE_RPC
              value: "true"
            {{- if .Values.cassandra.jvm.maxHeapSize }}
            - name: MAX_HEAP_SIZE
              value: {{ .Values.cassandra.jvm.maxHeapSize}}
            {{- end }}
            {{- if .Values.cassandra.jvm.newHeapSize }}
            - name: HEAP_NEWSIZE
              value: {{ .Values.cassandra.jvm.newHeapSize}}
            {{- end }}
          livenessProbe:
            exec:
              command: ["/bin/sh", "-c", "nodetool status"]
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
          readinessProbe:
            exec:
              command: ["/bin/sh", "-c", "nodetool status | grep -E \"^UN\\s+${POD_IP}\""]
            initialDelaySeconds: 60
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 5
          ports:
            - name: intra
              containerPort: 7000
            - name: tls
              containerPort: 7001
            - name: jmx
              containerPort: 7199
            - name: cql
              containerPort: 9042
            - name: thrift
              containerPort: 9160
          resources: 
            limits: {}
            requests: {}
          volumeMounts:
            - name: pxcentral-cassandra-data
              mountPath: /bitnami/cassandra
      {{- if .Values.images.pullSecrets }}
      imagePullSecrets:
        {{- range $sec := .Values.images.pullSecrets }}
        - name: {{ $sec | quote }}
        {{- end }}
      {{- end }}
      {{- if eq $externalPersistentStorageEnabled false }}
      volumes:
        - name: pxcentral-cassandra-data
          emptyDir: {}
      {{- end }}
  {{- if eq $externalPersistentStorageEnabled true }}
  volumeClaimTemplates:
    - metadata:
        name: pxcentral-cassandra-data
      spec:
        accessModes: ["ReadWriteOnce"]
        {{- if .Values.persistentStorage.storageClassName }}
        storageClassName: {{ .Values.persistentStorage.storageClassName }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.persistentStorage.consul.storage }}
  {{- end }}
{{- end -}}