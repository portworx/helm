{{/* Setting defaults if they are omitted. */}}
{{- $externalPersistentStorageEnabled := .Values.persistentStorage.enabled | default false }}
{{- $centralOIDC := .Values.oidc.centralOIDC.enabled | default false -}}
{{- $operatorToChartUpgrade := .Values.operatorToChartUpgrade | default false -}}
{{- $isOpenshiftCluster := .Capabilities.APIVersions.Has "apps.openshift.io/v1" -}}
{{- if eq $centralOIDC true }}
apiVersion: v1
kind: ServiceAccount
metadata:
  name: px-keycloak-account
  labels:
    app.kubernetes.io/component: keycloak
{{- include "px-backup.labels" . | nindent 4 }}
  namespace: {{ .Release.Namespace }}
---
kind: Role
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: px-keycloak-role
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/component: keycloak
{{- include "px-backup.labels" . | nindent 4 }}
rules:
  - apiGroups: [""]
    resources: ["secrets"]
    verbs: ["get"]
---
apiVersion: v1
kind: Secret
metadata:
  labels:
    app.kubernetes.io/component: keycloak
{{- include "px-backup.labels" . | nindent 4 }}
  name: pxcentral-keycloak-postgresql
  namespace: {{ .Release.Namespace }}
type: Opaque
stringData:
  postgresql-username: {{ .Values.oidc.centralOIDC.keyCloakBackendUserName }}
  postgresql-password: {{ .Values.oidc.centralOIDC.keyCloakBackendPassword }}
---
apiVersion: v1
kind: Secret
metadata:
  labels:
    app.kubernetes.io/component: keycloak
{{- include "px-backup.labels" . | nindent 4 }}
  name: pxcentral-keycloak-http
  namespace: {{ .Release.Namespace }}
type: Opaque
stringData:
  password: {{ .Values.oidc.centralOIDC.defaultPassword }}
---
kind: RoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: px-keycloak-role-binding
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/component: keycloak
{{- include "px-backup.labels" . | nindent 4 }}
subjects:
- kind: ServiceAccount
  name: px-keycloak-account
  namespace: {{ .Release.Namespace }}
roleRef:
  kind: Role
  name: px-keycloak-role
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: pxcentral-keycloak-sh
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/component: keycloak
{{- include "px-backup.labels" . | nindent 4 }}
data:
  keycloak.sh: |
    #!/usr/bin/env bash

    set -o errexit
    set -o nounset

    exec /opt/jboss/tools/docker-entrypoint.sh -b 0.0.0.0  -c standalone.xml
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: pxcentral-keycloak-startup
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/component: keycloak
{{- include "px-backup.labels" . | nindent 4 }}
data:
  keycloak.cli: |
    embed-server --std-out=echo
    batch
    ## Sets the node identifier to the node name (= pod name). Node identifiers have to be unique. They can have a
    ## maximum length of 23 characters. Thus, the chart's fullname template truncates its length accordingly.
    /subsystem=transactions:write-attribute(name=node-identifier, value=${jboss.node.name})
    
    
    # Allow log level to be configured via environment variable
    /subsystem=logging/console-handler=CONSOLE:write-attribute(name=level, value=${env.WILDFLY_LOGLEVEL:INFO})
    /subsystem=logging/root-logger=ROOT:write-attribute(name=level, value=${env.WILDFLY_LOGLEVEL:INFO})
    
    # Add dedicated eventsListener config element to allow configuring elements.
    /subsystem=keycloak-server/spi=eventsListener:add()
    /subsystem=keycloak-server/spi=eventsListener/provider=jboss-logging:add(enabled=true)
    
    # Propagate success events to INFO instead of DEBUG, to expose successful logins for log analysis
    /subsystem=keycloak-server/spi=eventsListener/provider=jboss-logging:write-attribute(name=properties.success-level,value=info)
    /subsystem=keycloak-server/spi=eventsListener/provider=jboss-logging:write-attribute(name=properties.error-level,value=warn)
    
    
    # Configure datasource to use explicit query timeout in seconds
    /subsystem=datasources/data-source=KeycloakDS/:write-attribute(name=query-timeout,value=${env.DB_QUERY_TIMEOUT:300})
    
    # Configure datasource to connection before use
    /subsystem=datasources/data-source=KeycloakDS/:write-attribute(name=validate-on-match,value=${env.DB_VALIDATE_ON_MATCH:true})
    
    # Configure datasource to try all other connections before failing
    /subsystem=datasources/data-source=KeycloakDS/:write-attribute(name=use-fast-fail,value=${env.DB_USE_CAST_FAIL:false})
    
    
    run-batch
    stop-embedded-server
---
apiVersion: v1
kind: Service
metadata:
  name: pxcentral-keycloak-postgresql-headless
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/component: keycloak
    app: postgresql
{{- include "px-backup.labels" . | nindent 4 }}
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app: postgresql
---
apiVersion: v1
kind: Service
metadata:
  name: pxcentral-keycloak-postgresql
  namespace: {{ .Release.Namespace }}
  labels:
    app: postgresql
    app.kubernetes.io/component: keycloak
{{- include "px-backup.labels" . | nindent 4 }}
spec:
  type: ClusterIP
  ports:
    - name: tcp-postgresql
      port: 5432
      targetPort: tcp-postgresql
  selector:
    app: postgresql
    role: master
---
apiVersion: v1
kind: Service
metadata:
  name: pxcentral-keycloak-headless
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/component: keycloak
    service: headless
{{- include "px-backup.labels" . | nindent 4 }}
spec:
  type: ClusterIP
  clusterIP: None
  ports:
    - name: http
      port: 80
      targetPort: http
      protocol: TCP
    - name: https
      port: 8443
      targetPort: https
      protocol: TCP
  selector:
    app.kubernetes.io/component: keycloak
---
apiVersion: v1
kind: Service
metadata:
  name: pxcentral-keycloak-http
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/component: keycloak
    service: http
{{- include "px-backup.labels" . | nindent 4 }}
spec:
  ports:
    - name: http
      port: 80
      targetPort: http
      protocol: TCP
    - name: https
      port: 8443
      targetPort: https
      protocol: TCP
  selector:
    app.kubernetes.io/component: keycloak
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: pxcentral-keycloak-postgresql
  namespace: {{ .Release.Namespace }}
  labels:
    app: postgresql
    role: master
    app.kubernetes.io/component: keycloak
{{- include "px-backup.labels" . | nindent 4 }}
spec:
  serviceName: pxcentral-keycloak-postgresql-headless
  replicas: 1
  updateStrategy:
    type: RollingUpdate
  selector:
    matchLabels:
      app: postgresql
      role: master
      app.kubernetes.io/component: keycloak
      app.kubernetes.io/name: {{.Release.Name }}
      app.kubernetes.io/instance: {{.Release.Name }}
      app.kubernetes.io/managed-by: {{.Release.Service }}
  template:
    metadata:
      name: pxcentral-keycloak-postgresql
      labels:
        app: postgresql
        role: master
        app.kubernetes.io/component: keycloak
        app.kubernetes.io/name: {{.Release.Name }}
        app.kubernetes.io/instance: {{.Release.Name }}
        app.kubernetes.io/managed-by: {{.Release.Service }}
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              {{- if .Values.pxbackup.nodeAffinityLabel }}
              - key: {{ .Values.pxbackup.nodeAffinityLabel }}
                operator: Exists
              {{- else }}
              - key: pxbackup/enabled
                operator: NotIn
                values:
                - "false"
              {{- end }}
      serviceAccountName: px-keycloak-account
      {{- if eq .Values.storkRequired true }}
      schedulerName: stork
      {{- end }}
      {{- if .Values.images.pullSecrets }}
      imagePullSecrets:
        {{- range $sec := .Values.images.pullSecrets }}
        - name: {{ $sec | quote }}
        {{- end }}
      {{- end }}
      {{- if $isOpenshiftCluster}}
      {{- else }}
      securityContext:
{{ toYaml .Values.securityContext | indent 8 }}
      {{- end }}
      containers:
        - name: pxcentral-keycloak-postgresql
          image: {{ printf "%s/%s/%s:%s" .Values.images.keycloakBackendImage.registry .Values.images.keycloakBackendImage.repo .Values.images.keycloakBackendImage.imageName .Values.images.keycloakBackendImage.tag }}
          imagePullPolicy: {{ .Values.images.pullPolicy }}
          {{ if eq $operatorToChartUpgrade true }}
          securityContext:
            runAsUser: 1001
          {{- end }}
          env:
            - name: BITNAMI_DEBUG
              value: "false"
            - name: POSTGRESQL_PORT_NUMBER
              value: "5432"
            - name: POSTGRESQL_VOLUME_DIR
              value: "/bitnami/postgresql"
            - name: PGDATA
              value: "/bitnami/postgresql/data"
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: pxcentral-keycloak-postgresql
                  key: postgresql-username
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: pxcentral-keycloak-postgresql
                  key: postgresql-password
            - name: POSTGRES_DB
              value: "keycloak"
            - name: POSTGRESQL_ENABLE_LDAP
              value: "no"
          ports:
            - name: tcp-postgresql
              containerPort: 5432
          livenessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - exec pg_isready -U "keycloak" -d "keycloak" -h 127.0.0.1 -p 5432
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          readinessProbe:
            exec:
              command:
                - /bin/sh
                - -c
                - -e
                - |
                  exec pg_isready -U "keycloak" -d "keycloak" -h 127.0.0.1 -p 5432
                  [ -f /opt/bitnami/postgresql/tmp/.initialized ] || [ -f /bitnami/postgresql/.initialized ]
            initialDelaySeconds: 5
            periodSeconds: 10
            timeoutSeconds: 5
            successThreshold: 1
            failureThreshold: 6
          volumeMounts:
            - name: dshm
              mountPath: /dev/shm
            - name: pxcentral-keycloak-data
              mountPath: /bitnami/postgresql
      volumes:
        - name: dshm
          emptyDir:
            medium: Memory
            sizeLimit: 1Gi
        {{- if eq $externalPersistentStorageEnabled false }}
        - name: pxcentral-keycloak-data
          emptyDir: {}
        {{- end }}
  {{- if eq $externalPersistentStorageEnabled true }}
  volumeClaimTemplates:
    - metadata:
        name: pxcentral-keycloak-data
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: {{ .Values.persistentStorage.keycloakBackendVolumeSize }}
        {{- if .Values.persistentStorage.storageClassName }}
        storageClassName: {{ .Values.persistentStorage.storageClassName }}
        {{- end }}
  {{- end }}
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: pxcentral-keycloak
  namespace: {{ .Release.Namespace }}
  labels:
    app.kubernetes.io/component: keycloak
{{- include "px-backup.labels" . | nindent 4 }}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/component: keycloak
      app.kubernetes.io/name: {{.Release.Name }}
      app.kubernetes.io/instance: {{.Release.Name }}
      app.kubernetes.io/managed-by: {{.Release.Service }}
  replicas: 1
  serviceName: pxcentral-keycloak-headless
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/component: keycloak
        app.kubernetes.io/name: {{.Release.Name }}
        app.kubernetes.io/instance: {{.Release.Name }}
        app.kubernetes.io/managed-by: {{.Release.Service }}
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              {{- if .Values.pxbackup.nodeAffinityLabel }}
              - key: {{ .Values.pxbackup.nodeAffinityLabel }}
                operator: Exists
              {{- else }}
              - key: pxbackup/enabled
                operator: NotIn
                values:
                - "false"
              {{- end }}
      restartPolicy: Always
      serviceAccountName: px-keycloak-account
      {{- if eq .Values.storkRequired true }}
      schedulerName: stork
      {{- end }}
      {{- if .Values.images.pullSecrets }}
      imagePullSecrets:
        {{- range $sec := .Values.images.pullSecrets }}
        - name: {{ $sec | quote }}
        {{- end }}
      {{- end }}
      {{- if $isOpenshiftCluster}}
      {{- else }}
      securityContext:
{{ toYaml .Values.securityContext | indent 8 }}
      {{- end }}
      initContainers:
        - name: wait-for-postgresql
          image: "{{ .Values.images.keycloakInitContainerImage.registry }}/{{ .Values.images.keycloakInitContainerImage.repo }}/{{ .Values.images.keycloakInitContainerImage.imageName }}:{{ .Values.images.keycloakInitContainerImage.tag }}"
          imagePullPolicy: {{ .Values.images.pullPolicy }}
          command:
            - sh
            - -c
            - |
              until printf "." && nc -z -w 2 pxcentral-keycloak-postgresql 5432; do
                  sleep 2;
              done;

              echo 'PostgreSQL OK ✓'
          resources:
            {}
        - name: px-keycloak-login-theme
          image: {{ printf "%s/%s/%s:%s" .Values.images.keycloakLoginThemeImage.registry .Values.images.keycloakLoginThemeImage.repo .Values.images.keycloakLoginThemeImage.imageName .Values.images.keycloakLoginThemeImage.tag }}
          imagePullPolicy: {{ .Values.images.pullPolicy }}
          command:
            - sh
          args:
            - -c
            - |
              echo "Copying portworx theme..."
              cp -R /portworx/* /theme
          volumeMounts:
          - name: theme
            mountPath: /theme
      containers:
        - name: keycloak
          image: {{ printf "%s/%s/%s:%s" .Values.images.keycloakFrontendImage.registry .Values.images.keycloakFrontendImage.repo .Values.images.keycloakFrontendImage.imageName .Values.images.keycloakFrontendImage.tag }}
          imagePullPolicy: {{ .Values.images.pullPolicy }}
          command:
            - /scripts/keycloak.sh
          env:
            - name: KEYCLOAK_USER
              value: {{ .Values.oidc.centralOIDC.defaultUsername }}
            - name: KEYCLOAK_PASSWORD_FILE
              value: /secrets/password
            - name: JAVA_TOOL_OPTIONS
              value: "-XX:+UseContainerSupport -XX:MaxRAMPercentage=50.0"
            - name: PROXY_ADDRESS_FORWARDING
              value: "true"
            - name: DB_VENDOR
              value: postgres
            - name: DB_ADDR
              value: pxcentral-keycloak-postgresql
            - name: DB_PORT
              value: "5432"
            - name: DB_DATABASE
              value: "keycloak"
            - name: DB_USER
              valueFrom:
                secretKeyRef:
                  name: pxcentral-keycloak-postgresql
                  key: postgresql-username
            - name: DB_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: pxcentral-keycloak-postgresql
                  key: postgresql-password
            - name: JGROUPS_DISCOVERY_PROTOCOL
              value: "dns.DNS_PING"
            - name: JGROUPS_DISCOVERY_PROPERTIES
              value: "dns_query=pxcentral-keycloak-headless"
            {{- if .Values.caCertsSecretName }}
            - name: X509_CA_BUNDLE
              value: /tmp/certs/*
            {{- end }}
          volumeMounts:
            - name: sh
              mountPath: /scripts
              readOnly: true
            - name: secrets
              mountPath: /secrets
              readOnly: true
            - name: startup
              mountPath: /opt/jboss/startup-scripts
              readOnly: true
            - name: theme
              mountPath: /opt/jboss/keycloak/themes/portworx
            - name: keycloakdir
              mountPath: /.keycloak
            {{- if .Values.caCertsSecretName }}
            - name: ssl-cert-dir
              readOnly: true
              mountPath: /tmp/certs
            {{- end }}
          ports:
            - name: http
              containerPort: 8080
              protocol: TCP
            - name: https
              containerPort: 8443
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /auth/
              port: http
            initialDelaySeconds: 300
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: /auth/realms/master
              port: http
            initialDelaySeconds: 30
            timeoutSeconds: 1      
          resources:
            {}
      terminationGracePeriodSeconds: 60
      volumes:
        - name: sh
          configMap:
            name: pxcentral-keycloak-sh
            defaultMode: 0555
        - name: secrets
          secret:
            secretName: pxcentral-keycloak-http
        {{- if .Values.caCertsSecretName }}
        - name: ssl-cert-dir
          secret:
            defaultMode: 420
            secretName: "{{ .Values.caCertsSecretName }}"
        {{- end }}
        - name: startup
          configMap:
            name: pxcentral-keycloak-startup
            defaultMode: 0555
        {{- if eq $externalPersistentStorageEnabled false }}
        - name: theme
          emptyDir: {}
        {{- end }}
        - emptyDir: {}
          name: keycloakdir
  {{- if eq $externalPersistentStorageEnabled true }}
  volumeClaimTemplates:
    - metadata:
        name: theme
      spec:
        accessModes:
          - "ReadWriteOnce"
        resources:
          requests:
            storage: {{ .Values.persistentStorage.keycloakThemeVolumeSize }}
        {{- if .Values.persistentStorage.storageClassName }}
        storageClassName: {{ .Values.persistentStorage.storageClassName }}
        {{- end }}
  {{- end }}
{{- end -}}
